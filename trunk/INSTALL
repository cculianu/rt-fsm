Install Guide for Realtime FSM
by Calin Culianu <calin@ajvar.org>
Last Updated: May 22, 2008

*************************** READ THIS FIRST ***********************************
You have the option of doing an automated install using the installer script, 
"./install.sh" *IF* you are on a Fedora Core 8 (i686 or x86_64) system.

(Support for Fedora Core 9 and perhaps even other distros coming soon!)

If you are not on Fedora Core 8, or if the "./install.sh" script fails for you,
or if you just like having full manual control, follow the below MANUAL 
installation instructions for installation.
******************************************************************************

MANUAL INSTALLATION INSTRUCTIONS

These instructions tell you how to setup a system to run this software.  This
includes brief instructions for setting up RTAI 3.6, Linux 2.6.23, and compiling
using the RealtimeFSM.ko module and FSMServer userspace program.

REQUIREMENTS:

- an x86 or x86_64 system
- Linux 2.6.xx
- RTAI 3.6
- A DAQ card
- Comedi 0.7.72 or above
- Comedilib
- A distro capable of running the above (some old versions of Gentoo or Debian
  can't run 2.4 kernels, so upgrade your distro!)

RECOMMENDED (meaning, well tested)

- Linux 2.6.23
- Fedora Core 8
- Tested with NI DAQ cards
- Comedilib 0.8.1
- Comedi 0.7.76

OPTIONAL
- A Lynx22 board if you want sound triggering in hard realtime


STEP 1: OBTAIN RTAI 3.6

1. Go to www.rtai.org and download rtai-3.6

2. Untar it into /usr/src so that you have a directory /usr/src/rtai-3.6

3. From the comandline (as root):

       # cd /usr/src
       # ln -sf rtai-3.6 rtai


STEP 2: OBTAIN LINUX 2.6.23 

1. Go to http://www.kernel.org/pub, and download linux-2.6.23.tar.bz2

2. As root, untar it into /usr/src.  You should have a directory called
/usr/src/linux-2.6.23

3. From the comandline (as root):

       # cd /usr/src
       # ln -sf linux-2.6.23 linux  

NOTE: You don't *have* to specifically use linux-2.6.23, any 2.6 kernel
supported by the RTAI patches may work, but I recommend 2.6.23 and these
instructions assume this kernel version.


STEP 3: OBTAIN COMEDI AND COMEDILIB

1.  Go to http://www.comedi.org and download comedi-0.7.76 (or newer) and the
    latest comedilib.

2.  Untar them to /usr/src

3.  Make symlinks:

        # cd /usr/src
        # ln -sf comedi-0.7.76 comedi       (replace comedi-0.7.76 with whatever comedi version you got)
        # ln -sf comedilib-0.8.1  comedlib  (replace comedilib-0.8.1 with whatever comedilib version you got)
  

STEP 4: PATCH THE KERNEL

1. Decide on a patch.  If you are using a 64-bit distro and system, use the patch:
      /usr/src/rtai/base/arch/x86_64/patches/hal-linux-2.6.23-x86_64-1.4-00.patch
   If you want to run on an i386 (x86, non-64-bit) system, use the patch:
       /usr/src/rtai/base/arch/i386/patches/hal-linux-2.6.23-i386-1.12-00.patch
       
2.  From the commandline (as root):

        # cd /usr/src/linux-2.6.23
        # patch -p1 < USE_PATCH_PATH_FROM_STEP_1_ABOVE_HERE
    
3.  Make sure the patch applied cleanly.  If it didn't -- something is amiss and
    you need to make sure you are using the correct kernel version for your
    patch.


STEP 5: CONFIGURE, BUILD, AND INSTALL THE KERNEL

0. From commandline, switch to the linux dir:

        # cd /usr/src/linux
  
1. Here, you have a few options.  If you are running Fedora Core 8 From the
   command-line, as root, do:
   
        # cp /boot/config-2.6.23*fc8 .config
        # make oldconfig
        
    (answer 'Y' to the IPIPE and/or Interrupt Pipeline question!)
    (if it asks you other questions, decide yourself whether to answer Y, N, or
M)
 
  If you aren't running Fedora Core 8 as your distro, you should still try and
  use the config file that came with your kernel.  You do that by putting it in
  the kernel source dir as .config (as above) and running 'make oldconfig'.
  
2. Enter kernel config and make sure a few key options are set/unset:

        # make menuconfig
        
    ---->  Processor Type And Features
        ----> Processor family  ** MAKE SURE TO SET YOUR PROCESSOR TYPE CORRECTLY.  Most x86 users are on Pentium-4's nowadays.  If you are on an x86_64 system set it to whtever processor is closest such as Core2Duo or Athlon64
        ----> [ ] Tickless System (OFF)
        ----> [*] Symmetric Multiprocessing (ON)  (this may be off if you are on a uniprocessor system)
        ----> [*] HPET Timer Support (ON)
        ----> [ ] Preemption Model (OFF)
        ----> [ ] Preempt the Big Kernel Lock (OFF)
        ----> [*] Interrupt Pipeline (ON)
        ----> High Memory Support (off) --> (OFF) (this option only appears on x86 and not on x86_64)
        ----> Timer Frequency (100Hz) (I prefer 100Hz but 1000Hz works too)
        ----> [ ] PAE (Physical Address Extension) Support  (OFF) 
    ---->  Power Management options (ACPI, APM)
        ----> [ ] Power Management support (OFF) (power management is BAD BAD BAD for realtime!!)
        ---->  CPU Frequency scaling 
            ----> [ ] CPU Frequency scaling (OFF) (you don't want to mess with the frequency of the processor in an RTOS!!!)
            
    ---->   Kernel hacking
        ----> [ ] Use 4Kb for kernel stacks instead of 8Kb (OFF) (we prefer larger stacks, thank you very much!)
    ---->   Cryptographic API
        ----> <M> Deflate compression algorithm (Either on or as a Module)
      
3. Feel free to set/unset any other options.  
   Hit ESC-ESC, and say 'Y' to saving your config.  Then do:
   
        # make -j2 && make -j2 modules && make modules_install
        
   To compile and the kernel and compiled and install kernel modules
  
4. Install your new kernel.  On Fedora Core 8 this is how it's done:

        # cp arch/i386/boot/bzImage /boot/bzImage-2.6.23
        # mkinitrd -v /boot/initrd-2.6.23.img 2.6.23
        # (now, edit /boot/grub/grub.conf and add a boot entry for this kernel with this initrd image!!)
        
5. Boot into your new kernel.  If you screwed up (4) above it won't boot.  Go
   back and see why.  Sometimes drivers are missing or the initrd is not ok.  On
   Fedora Core 8 things should 'just work', though, so that's why I recommend
   that distro.


STEP 6: COMPILE AND INSTALL RTAI

1. Make sure you are booted into your new, RTAI-patched kernel (see STEP 4
above)

2. Do make menuconfig on RTAI

       # cd /usr/src/rtai 
       # make menuconfig
   
3. Make sure the following options are set/unset:

    ----> General
        (/usr/realtime) Installation directory
        (/usr/src/linux) Linux source tree 
        [*] Build RTAI testsuite
    ----> Base system
        ----> Scheduling options
            [*] Busy wait to ensure resume time alignment (I like this option!)
        ----> Support services
            <M> Fifo
            <M> Shared memory         
            [*] Support for Posix CLOCK_REALTIME APIs
        ----> Other features
            [*] New return values of blocking RTAI APIs
            [*] Immediate Linux syscall in hard real time
            [*] Mathfuns support in kernel
            [*]   C99 standard support
            <*> Real-time malloc support 
        -----> Add-ons
            [*] Comedi support over LXRT 
            (/usr/src/comedi) COMEDI installation directory
            [*] Real-Time Driver Model over RTAI
            [*]   Shared interrupts
          
3. Feel free to set/unset any other options.  
   Hit ESC-ESC, and say 'Y' to saving your config.  Then do:
   
       # make && make install
       
   This will compile RTAI and install it in /usr/realtime
   
4. Setup RTAI kernel module symlinks, then run depmod

       # cd /lib/modules/`uname -r` 
       # mkdir rtai
       # cd rtai
       # ln -sf /usr/realtime/modules/* .
       # depmod -a


STEP 7: COMPILE AND INSTALL COMEDI

1. Pretty easy:

       # cd /usr/src/comedi
       # ./configure --with-rtaidir=/usr/realtime
       # make -j2 && make install
   
   
STEP 8: COMPILE AND INSTALL COMEDILIB

1. Pretty easy:

       # cd /usr/src/comedilib
       # ./configure 
       # make -j2 && make install
       
   Next, make sure that if the libs were installed in /usr/local/lib, that
   ld.so.conf scans that directory for libs:
   
       # vi /etc/ld.so.conf
       
   Make sure the line: /usr/local/lib is found in that file!
   
   Now, run ldconfig since you just installed a new library:
   
      # ldconfig
   


STEP 9: COMPILE THIS CODE!

1. As root:

       # cd /path/to/rtfsm
       # make
   


STEP 10: MAKE SURE COMEDI DEVICE IS CONFIGURED AND RTAI KERNEL MODULES ARE
LOADED 

1. Configure a comedi device.  For example, if you have an NI PCI board, do:

      # modprobe ni_pcimio
      # /usr/local/sbin/comedi_config /dev/comedi0 ni_pcimio

2. Load the required RTAI modules and other kernel modules:

      # modprobe rtai_sched
      # modprobe rtai_fifos
      # modprobe rtai_math
      # modprobe rtai_shm
      # modprobe rtai_sem
      # modprobe kcomedilib
      # modprobe zlib_deflate
  


RUNNING THE SOFTWARE

Once the proper kernel modules are loaded, and your comedi device is configured
as /dev/comedi0, you can Load the RealtimeFSM.ko kernel module:

      # cd /path/to/rtfsm
      # insmod ./RealtimeFSM.ko
  
Alternatively, you can modify parameters, such as task_rate.

      # insmod ./RealtimeFSM.ko task_rate=6000
  
There are other optional parameters besides task_rate that the kernel module
accepts.  Do:

      # modinfo ./RealtimeFSM.ko
      
To see other parameters.
 
If it fails to load, do 

      # dmesg
  
To see why it failed. 
  

Once the RealtimeFSM.ko module is loaded into the kernel, you can start the
FSMServer:

    # ./FSMServer

It is listening for connections on port 3333.  Use the Client/Matlab classes to
communicate with the server and send it state machines.

NB: When the system is running, you can query /proc/RealtimeFSM to see runtime
stats such as latency, jitter, etc.


OPTIONAL REALTIME SOUND TRIGGERING

You have the option of using this software to do realtime sound triggering 
(realtime sound machine, as it's called).  This option actually itself has two 
variants:

- Hard realtime sound triggering with a Lynx22 soundcard
- Soft realtime sound triggering with any soundcard that Linux supports

SOFT REALTIME SOUND

To use soft realtime sound triggering, make sure the drivers for your soundcard 
are loaded into the kernel and that sound works.  This is a somewhat 
distribution-dependent thing but on Fedora Core 8, in most cases, sound drivers
are already loaded for you by the boot scripts and sound should 'just work'.

Once you are sure sound works, load the sound triggering module and sound 
server as follows:

# insmod ./UserspaceExtTrig.ko
# ./SoundServer

Soft realtime sound triggering typically has a latency of 100ms and a jitter
of +/- 10ms.

HARD REALTIME SOUND

This method is more precise (5 ms latency and very low jitter) than soft 
realtime triggering, but it requires the more expensive Lynx22 board from Lynx
Studio Technologies, Inc.

To use this variant of sound triggering, make sure the Lynx22 board is 
installed in your computer and load the two kernel modules and sound server as 
follows:

# insmod ./LynxTWO_RT.ko
# insmod ./LynxTrig_RT.ko
# ./SoundServer


Regardless of which sound triggering mechanism you choose (soft or hard 
realtime), you use it from the state machine by way of the output routing 
of type 'sound' in the FSM output routing spec.  (See the matlab help for 
'SetOutputRouting' in the @RTLSM class for details).



Email me: <calin@ajvar.org> or <cculianu@yahoo.com> with any questions!
